#I don't need the grid to be especially fine...
den <- kde2d(x=Z[,1],y=Z[,2], n=100)
image(den)
contour(den, add=TRUE)
mnorm <- function(mu, sigma)
{
function(n) {
mu1 <- mu[1]
mu2 <- mu[2]
sigma1 <- Sigma[1,1]
sigma2 <- Sigma[2,2]
C <- Sigma[1,2]
rho <- C/(sigma1*sigma2)
Z.1 <- rnorm(n)
Z.2 <- rnorm(n)
X1 <- sigma1*Z.1 + mu1
X2 <- rho*sigma2*Z.1 + sigma2*sqrt(1-rho^2)*Z.2 + mu2
return(cbind(X1,X2))
}
}
mu = c(0,0)
Sigma = matrix(c(1,.5,.5,1),2)
my.mvnorm <- mnorm(mu,Sigma)
Z <- my.mvnorm(100)
library(MASS)
#I don't need the grid to be especially fine...
den <- kde2d(x=Z[,1],y=Z[,2], n=100)
image(den)
contour(den, add=TRUE)
#how many Magic booster packs would I have to buy
#to collect the entire set?
#That is a coupon collectors problem with a pretty simple
#approximation.
coupon <- function(n) {
gamma <- 0.5772156649
return(n*log(n) + gamma*n + 1/2)
}
#280 cards in the 2018 standard set
#10 cards per pack
#I would have to buy...
ceiling(coupon(280)/10)
#Thats interesting...
#How many trials do I need to repeat
#in order to find one false positive?
#P(error) = e
#P(no error) = 1 - e
#Lets make it a closure so it returns
#a function where we can tune the error-rate
p.test <- function(e) {
function(m) {
1 - (1-e)^m
}
}
f1 <- p.test(.01)
f2 <- p.test(.02)
f3 <- p.test(.03)
x <- seq(1,1000)
plot(x,f1(x),col='red')
#The lower the error rate the longer it takes...
#That is intuitive.
#R does not have a multivariate normal distribution
#Lets make one.
mnorm <- function(mu, sigma)
{
function(n) {
mu1 <- mu[1]
mu2 <- mu[2]
sigma1 <- Sigma[1,1]
sigma2 <- Sigma[2,2]
C <- Sigma[1,2]
rho <- C/(sigma1*sigma2)
Z.1 <- rnorm(n)
Z.2 <- rnorm(n)
X1 <- sigma1*Z.1 + mu1
X2 <- rho*sigma2*Z.1 + sigma2*sqrt(1-rho^2)*Z.2 + mu2
return(cbind(X1,X2))
}
}
#I don't want to mask the MASS package mvrnorm...
#hey... I could have used that instead...
mu = c(0,0)
Sigma = matrix(c(1,.5,.5,1),2)
my.mvnorm <- mnorm(mu,Sigma)
Z <- my.mvnorm(100)
#I could write a density estimator... but it would take too long...
library(MASS)
#I don't need the grid to be especially fine...
den <- kde2d(x=Z[,1],y=Z[,2], n=100)
image(den)
contour(den, add=TRUE)
mu = c(0,0)
Sigma = matrix(c(1,.5,.5,1),2)
my.mvnorm <- mnorm(mu,Sigma)
Z <- my.mvnorm(100)
#I could write a density estimator... but it would take too long...
library(MASS)
#I don't need the grid to be especially fine...
den <- kde2d(x=Z[,1],y=Z[,2], n=100)
image(den)
contour(den, add=TRUE)
mu = c(0,0)
Sigma = matrix(c(1,.5,.5,1),2)
my.mvnorm <- mnorm(mu,Sigma)
Z <- my.mvnorm(100)
#I could write a density estimator... but it would take too long...
library(MASS)
#I don't need the grid to be especially fine...
den <- kde2d(x=Z[,1],y=Z[,2], n=100)
image(den)
contour(den, add=TRUE)
mu = c(0,0)
Sigma = matrix(c(1,.5,.5,1),2)
my.mvnorm <- mnorm(mu,Sigma)
Z <- my.mvnorm(100)
#I could write a density estimator... but it would take too long...
library(MASS)
#I don't need the grid to be especially fine...
den <- kde2d(x=Z[,1],y=Z[,2], n=100)
image(den)
contour(den, add=TRUE)
mu = c(0,0)
Sigma = matrix(c(1,.5,.5,1),2)
my.mvnorm <- mnorm(mu,Sigma)
Z <- my.mvnorm(100)
#I could write a density estimator... but it would take too long...
library(MASS)
#I don't need the grid to be especially fine...
den <- kde2d(x=Z[,1],y=Z[,2], n=100)
image(den)
contour(den, add=TRUE)
mu = c(0,0)
Sigma = matrix(c(1,.5,.5,1),2)
my.mvnorm <- mnorm(mu,Sigma)
Z <- my.mvnorm(100)
#I could write a density estimator... but it would take too long...
library(MASS)
#I don't need the grid to be especially fine...
den <- kde2d(x=Z[,1],y=Z[,2], n=100)
image(den)
contour(den, add=TRUE)
mu = c(0,0)
Sigma = matrix(c(1,.5,.5,1),2)
my.mvnorm <- mnorm(mu,Sigma)
Z <- my.mvnorm(100)
#I could write a density estimator... but it would take too long...
library(MASS)
#I don't need the grid to be especially fine...
den <- kde2d(x=Z[,1],y=Z[,2], n=100)
image(den)
contour(den, add=TRUE)
mu = c(0,0)
Sigma = matrix(c(1,.5,.5,1),2)
my.mvnorm <- mnorm(mu,Sigma)
Z <- my.mvnorm(100)
#I could write a density estimator... but it would take too long...
library(MASS)
#I don't need the grid to be especially fine...
den <- kde2d(x=Z[,1],y=Z[,2], n=100)
image(den)
contour(den, add=TRUE)
mu = c(0,0)
Sigma = matrix(c(1,.5,.5,1),2)
my.mvnorm <- mnorm(mu,Sigma)
Z <- my.mvnorm(100)
#I could write a density estimator... but it would take too long...
library(MASS)
#I don't need the grid to be especially fine...
den <- kde2d(x=Z[,1],y=Z[,2], n=100)
image(den)
contour(den, add=TRUE)
mu = c(0,0)
Sigma = matrix(c(1,.5,.5,1),2)
my.mvnorm <- mnorm(mu,Sigma)
Z <- my.mvnorm(100)
#I could write a density estimator... but it would take too long...
library(MASS)
#I don't need the grid to be especially fine...
den <- kde2d(x=Z[,1],y=Z[,2], n=100)
image(den)
contour(den, add=TRUE)
mu = c(0,0)
Sigma = matrix(c(1,.5,.5,1),2)
my.mvnorm <- mnorm(mu,Sigma)
Z <- my.mvnorm(100)
#I could write a density estimator... but it would take too long...
library(MASS)
#I don't need the grid to be especially fine...
den <- kde2d(x=Z[,1],y=Z[,2], n=100)
image(den)
contour(den, add=TRUE)
mu = c(0,0)
Sigma = matrix(c(1,.5,.5,1),2)
my.mvnorm <- mnorm(mu,Sigma)
Z <- my.mvnorm(100)
#I could write a density estimator... but it would take too long...
library(MASS)
#I don't need the grid to be especially fine...
den <- kde2d(x=Z[,1],y=Z[,2], n=100)
image(den)
contour(den, add=TRUE)
mu = c(0,0)
Sigma = matrix(c(1,.5,.5,1),2)
my.mvnorm <- mnorm(mu,Sigma)
Z <- my.mvnorm(100)
#I could write a density estimator... but it would take too long...
library(MASS)
#I don't need the grid to be especially fine...
den <- kde2d(x=Z[,1],y=Z[,2], n=100)
image(den)
contour(den, add=TRUE)
Z <- my.mvnorm(1000)
library(MASS)
#I don't need the grid to be especially fine...
den <- kde2d(x=Z[,1],y=Z[,2], n=100)
image(den)
contour(den, add=TRUE)
Z <- my.mvnorm(5000)
library(MASS)
#I don't need the grid to be especially fine...
den <- kde2d(x=Z[,1],y=Z[,2], n=100)
image(den)
contour(den, add=TRUE)
my.coxph <- coxph(Surv(age, status) ~ operation + nodes, data=df)
df <- read.csv('haberman.data', col.names = c('age', 'operation', 'nodes', 'status'))
hist(df$age,
main = 'Distribution of patient age (5 year bins)',
prob = TRUE,
xlim=c(20,100),
xlab = 'Age',
col='peachpuff')
lines(density(df$age),
col='chocolate',
lwd=2)
my.coxph <- coxph(Surv(age, status) ~ operation + nodes, data=df)
summary(my.coxph)
ggsurvplot(survfit(my.coxph))
ggsurvplot(survfit(my.coxph), data=df)
#Operations have no signifigant effect on hazard rate.
#Nodes, however, does. The more nodes the greater the hazard
#to ones health.
#Lets look at the survival plot.
ggsurvplot(survfit(my.coxph), data=df)
knitr::opts_chunk$set(echo = TRUE)
(coupon(280)
(coupon(280))
(coupon(280))
ceiling(coupon(280)/10)
Z
class(Z)
boxplot(df$nodes)
hist(df$nodes)
hist(df$nodes, col='peachpuff')
hist(df$nodes, col='peachpuff')
hist(df$nodes, col='peachpuff', xlab = 'Population', main='Nodes')
survreg(Surv(age, status) ~ operation + nodes, data=df)
summary(survreg(Surv(age, status) ~ operation + nodes, data=df))
summary(survreg(Surv(age, status) ~ operation + nodes, data=df, dist = 'loglog'))
quantile(df$nodes)
1.5 * IQR(df$nodes)
H <- 1.5 * IQR(df$nodes)
qnt <- quantile(df$nodes, probs = c(.25,.75))
qnt
df[df$nodes > (qnt[2] + H)]
df[df$nodes > (qnt[2] + H),]
df.trim <- df[df$nodes > (qnt[2] + H),]
summary(survreg(Surv(age, status) ~ operation + nodes, data=df.trim, dist = 'loglog'))
df.trim
hist(df.trim$nodes)
H
qnt[2] + H
df.trim <- df[df$nodes < (qnt[2] + H),]
summary(survreg(Surv(age, status) ~ operation + nodes, data=df.trim, dist = 'loglog'))
summary(survreg(Surv(age, status) ~ operation + nodes, data=df.trim))
df.trim <- df[df$nodes < (qnt[2] + H),]
hist(df.trim$nodes)
summary(survreg(Surv(age, status) ~ operation + nodes, data=df))
summary(survreg(Surv(age, status) ~nodes, data=df))
summary(survreg(Surv(age, status) ~ operation + nodes, data=df, dist='loglog'))
?survreg
coef(summary(survreg(Surv(age, status) ~ operation + nodes, data=df, dist='loglog')))
y <- rweibull(1000,shape=2,shape=5)
y <- rweibull(1000,shape=2,scale=5)
y
exp(coef(summary(survreg(Surv(age, status) ~ operation + nodes, data=df, dist='loglog'))))
summary(my.surv)
my.surv <- survreg(Surv(age, status) ~ operation + nodes, data=df, dist='loglog')
summary(my.surv)
summary(my.surv)
exp(coef(my.surv))
my.coxph <- coxph(Surv(age, status) ~ operation + nodes, data=df)
summary(my.coxph)
summary(my.coxph)
exp(coef(my.coxph))
plot(x,f1(x),col='red', type='l', lwd='2', ylim=c(0,1))
lines(x, f2(x), col='blue', type='l', lwd='2')
plot(x,f1(x),col='red', type='l', lwd='2', ylim=c(0,1))
lines(x, f2(x), col='blue', type='l', lwd='2')
lines(x, f3(x), col='green', type='l', lwd='2')
legend(95,1, legend=c('.009','.01','.02'),col=c('red','blue','green'))
plot(x,f1(x),col='red', type='l', lwd='2', ylim=c(0,1))
lines(x, f2(x), col='blue', type='l', lwd='2')
lines(x, f3(x), col='green', type='l', lwd='2')
legend(1,95, legend=c('.009','.01','.02'),col=c('red','blue','green'))
plot(x,f1(x),col='red', type='l', lwd='2', ylim=c(0,1))
lines(x, f2(x), col='blue', type='l', lwd='2')
lines(x, f3(x), col='green', type='l', lwd='2')
legend(1,50, legend=c('.009','.01','.02'),col=c('red','blue','green'))
legend(20,50, legend=c('.009','.01','.02'),col=c('red','blue','green'))
plot(x,f1(x),col='red', type='l', lwd='2', ylim=c(0,1))
lines(x, f2(x), col='blue', type='l', lwd='2')
lines(x, f3(x), col='green', type='l', lwd='2')
legend(20,50, legend=c('.009','.01','.02'),col=c('red','blue','green'))
plot(x,f1(x),col='red', type='l', lwd='2', ylim=c(0,1))
lines(x, f2(x), col='blue', type='l', lwd='2')
lines(x, f3(x), col='green', type='l', lwd='2')
legend(20,1, legend=c('.009','.01','.02'),col=c('red','blue','green'))
plot(x,f1(x),col='red', type='l', lwd='2', ylim=c(0,1))
lines(x, f2(x), col='blue', type='l', lwd='2')
lines(x, f3(x), col='green', type='l', lwd='2')
legend(20,20, legend=c('.009','.01','.02'),col=c('red','blue','green'))
plot(x,f1(x),col='red', type='l', lwd='2', ylim=c(0,1))
lines(x, f2(x), col='blue', type='l', lwd='2')
lines(x, f3(x), col='green', type='l', lwd='2')
legend(20,20, legend=c('.009','.01','.02'),col=c('red','blue','green'), lty=1:3, cex=0.8)
plot(x,f1(x),col='red', type='l', lwd='2', ylim=c(0,1))
lines(x, f2(x), col='blue', type='l', lwd='2')
lines(x, f3(x), col='green', type='l', lwd='2')
legend(1,95, legend=c('.009','.01','.02'),col=c('red','blue','green'), lty=1:3, cex=0.8)
legend(1,95, legend=c('.009','.01','.02'),col=c('red','blue','green'), lty=1:2, cex=0.8)
plot(x,f1(x),col='red', type='l', lwd='2', ylim=c(0,1))
lines(x, f2(x), col='blue', type='l', lwd='2')
lines(x, f3(x), col='green', type='l', lwd='2')
legend(1,95, legend=c('.009','.01','.02'),col=c('red','blue','green'), lty=1:2, cex=0.8)
plot(x,f1(x),col='red', type='l', lwd='2', ylim=c(0,1))
lines(x, f2(x), col='blue', type='l', lwd='2')
lines(x, f3(x), col='green', type='l', lwd='2')
legend(0.1,850, legend=c('.009','.01','.02'),col=c('red','blue','green'), lty=1:2, cex=0.8)
plot(x,f1(x),col='red', type='l', lwd='2', ylim=c(0,1))
lines(x, f2(x), col='blue', type='l', lwd='2')
lines(x, f3(x), col='green', type='l', lwd='2')
legend(850,0.1, legend=c('.009','.01','.02'),col=c('red','blue','green'), lty=1:2, cex=0.8)
plot(x,f1(x),col='red', type='l', lwd='2', ylim=c(0,1))
lines(x, f2(x), col='blue', type='l', lwd='2')
lines(x, f3(x), col='green', type='l', lwd='2')
legend(850,0.4, legend=c('.009','.01','.02'),col=c('red','blue','green'), lty=1:2, cex=0.8)
f1(x) >= 1.0
head(f1(x) >= 1.0)
head(which(f1(x) >= 1.0))
head(which(f1(x) == 1.0))
head((f1(x) == 1.0))
head((f1(x) >= .99))
which((f1(x) >= .99))
head(f1(x)[f1(x) >= .99])
head(f1(x)[f1(x) >= .999])
head(f1(x)[f1(x) >= .9999])
which(f1(x)[f1(x) >= .9999])
which(f1(x) >= .9999]
which(f1(x) >= .9999)
which(f1(x) >= .99)
which(f1(x) >= .99)[1]
which(f1(x) >= .99)[1]
which(f1(x) >= .99)[1]
which(f1(x) >= .99)[1]
which(f3(x) >= .99)[1]
which(f1(x) >= .99)[1]
which(f2(x) >= .99)[1]
which(f3(x) >= .99)[1]
my.coxph <- coxph(Surv(age, status) ~ nodes, data=df)
summary(my.coxph)
exp(coef(my.coxph))
my.coxph <- coxph(Surv(age, status) ~ operation + nodes, data=df)
summary(my.coxph)
exp(coef(my.coxph))
my.surv <- survreg(Surv(age, status) ~ nodes, data=df, dist='loglog')
summary(my.surv)
exp(coef(my.surv))
exp(-0.0103)
exp(0.0103)
df$operation
hist(df$operation)
table(df$operation,df$status)
table(df$status,df$operations)
table(df$status,df$operation)
cut(df$operation)
cut(df$operation, breaks='3')
cut(df$operation, breaks=3)
table(cut(df$operation, breaks=3), df$status)
fisher.test(table(cut(df$operation, breaks=3), df$status))
fisher.test(df$status, table(cut(df$operation, breaks=3)))
fisher.test(table(df$status, cut(df$operation, breaks=3)))
fisher.test(table(df$status, df$operation))
(table(df$status, df$operation))
prop.table((table(df$status, df$operation)))
(table(df$status, df$operation))
addmargins((table(df$status, df$operation)))
round(prop.table(addmargins((table(df$status, df$operation)))), digits = 3)
round(prop.table((table(df$status, df$operation))), digits = 3)
table(df$operation,df$status)
sapply(table(df$operation,df$status), function(X) {
print(X['1'] + X['2']
}
sapply(table(df$operation,df$status), function(X) {
print(X['1'] + X['2'])
}
)
sapply(table(df$operation,df$status), function(X) {
print(X[1] + X[2])
}
)
sapply(table(df$operation,df$status), function(X) {
X
}
sapply(table(df$operation,df$status), function(X) {
X
})
sapply(table(df$operation,df$status), function(X) {
X
})
sapply(table(df$operation,df$status), function(X) {
sum(X)
})
table(df$operations,df$status)
table(df$operation,df$status)
sum(table(df$operation,df$status))
table(df$operation,df$status)[1]
table(df$operation,df$status)[1,]
sum(table(df$operation,df$status)[1,])
sapply(table(df$operation,df$status)[1,], function(X) {
sum(X[1,])
})
sapply(table(df$operation,df$status)[1,], function(X) {
print(X)
})
sapply(table(df$operation,df$status), function(X) {
print(X)
})
sapply(table(df$operation,df$status), function(X) {
print(X[1,])
})
sapply(table(df$operation,df$status), function(X) {
print(class(X))
})
lapply(table(df$operation,df$status), function(X) {})
table(df$operation, df$status)
anova(table(df$operation, df$status))
as.data.frame(table(df$operation, df$status))
temp <- as.data.frame(table(df$operation, df$status))
anova(temp)
anova(my.surv)
table(df$operation,df$nodes)
table(df$operation,df$status)
table(df$operation,df$status)[,1]
table(df$operation,df$status)[,1] + table(df$operation,df$status)[,2]
op.status <- table(df$operation,df$status)
cbind(op.status,op.status[,1] + op.status[,2])
cbind(op.status,Freq = op.status[,1] + op.status[,2])
seq(min(df$operation), max(df$operation))
cbind(op.status,Freq = op.status[,1] + op.status[,2])
data <- cbind(op.status,Freq = op.status[,1] + op.status[,2])
index(data)
data <- cbind(op.status,Freq = op.status[,1] + op.status[,2])
cbind(rownames(data), data)
as.data.frame(cbind(rownames(data), data))
loglm(Freq ~ V1, data = as.data.frame(cbind(rownames(data), data)))
as.data.frame(cbind(rownames(data), data))
data <- as.data.frame(cbind(rownames(data), data))
loglm(Freq ~ V1, data = as.data.frame(cbind(rownames(data), data)))
lm(Freq ~ V1, data = as.data.frame(cbind(rownames(data), data)))
summary(lm(Freq ~ V1, data = as.data.frame(cbind(rownames(data), data))))
data
sapply(data, class)
data$Freq <- as.numeric(as.character(data$Freq))
data$V1 <- as.numeric(as.character(data$V1))
summary(lm(Freq ~ V1, data = as.data.frame(cbind(rownames(data), data))))
op.status <- table(operation = df$operation,status = df$status)
op.status
op.status
op.status[,1]/(op.status[,2] + op.status[,1])
op.status[,2]/(op.status[,2] + op.status[,1])
not.p <- op.status[,2]/(op.status[,2] + op.status[,1])
p <- op.status[,2]/(op.status[,2] + op.status[,1])
p/not.p
not.[]
not.p
p
p
p <- op.status[,1]/(op.status[,2] + op.status[,1])
p/not.p
not.p/p
p/not.p
status(rownames(op.status), p/not.p)
cbind(rownames(op.status), p/not.p)
cbind(as.numeric(rownames(op.status)), as.numeric(p/not.p))
as.data.frame(cbind(as.numeric(rownames(op.status)), as.numeric(p/not.p)))
as.data.frame(year = as.numeric(rownames(op.status)), odds = as.numeric(p/not.p)))
as.data.frame(year = as.numeric(rownames(op.status)), odds = as.numeric(p/not.p))
as.data.frame(year = as.numeric(rownames(op.status), odds = as.numeric(p/not.p))
)
data.frame(year = as.numeric(rownames(op.status), odds = as.numeric(p/not.p))
)
data.frame(year = as.numeric(rownames(op.status)), odds = as.numeric(p/not.p))
op.status = table(operation = df$operation, status = df$status)
p <- op.status[,1]/(op.status[,2] + op.status[,1])
not.p <- op.status[,2]/(op.status[,2] + op.status[,1])
odds <- p/not.p
df <- data.frame(year = as.numeric(rownames(op.status)), odds = as.numeric(p/not.p))
summary(lm(odds ~ year, data=df))
summary(glm(odds ~ year, data=df, family=poisson(link='log')))
ggsurvplot(fitdistr(my.coxph), data=df)
ggsurvplot(survfit(my.coxph), data=df)
df <- read.csv('haberman.data', col.names = c('age', 'operation', 'nodes', 'status'))
ggsurvplot(survfit(my.coxph), data=df)
